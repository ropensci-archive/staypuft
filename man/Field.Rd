% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Field.R
\name{Field}
\alias{Field}
\title{Field}
\description{
Basic field from which other fields should extend
}
\details{
It applies no formatting by default, and should only be used
in cases where data does not need to be formatted before being
serialized or deserialized. On error, the name of the field will be
returned.
}
\examples{
x <- fields$field()
x
x$error_messages

z <- fields$character()
z
z$error_messages
z$serialize(attr = "foo", obj = list(foo = "bar"))
z$deserialize("foo")
z$deserialize(fields$missing())
}
\section{Super class}{
\code{\link[staypuft:FieldABC]{staypuft::FieldABC}} -> \code{Field}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{class_name}}{(character) xxx}

\item{\code{CHECK_ATTRIBUTE}}{(logical) default: \code{TRUE}}

\item{\code{creation_index}}{(integer) xxx}

\item{\code{default}}{a class, default: \code{Missing}}

\item{\code{attribute}}{(character) xxx}

\item{\code{data_key}}{(character) xxx}

\item{\code{validate}}{xxx}

\item{\code{required}}{(logical) xxx}

\item{\code{allow_none}}{(logical) xxx}

\item{\code{load_only}}{(logical) xxx}

\item{\code{dump_only}}{(logical) xxx}

\item{\code{missing}}{(logical) xxx}

\item{\code{metadata}}{Extra arguments to be stored as metadata.}

\item{\code{error_messages}}{(list) xxx}

\item{\code{validators}}{(list) xxx}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Field$new()}}
\item \href{#method-print}{\code{Field$print()}}
\item \href{#method-get_value}{\code{Field$get_value()}}
\item \href{#method-validate_}{\code{Field$validate_()}}
\item \href{#method-fail}{\code{Field$fail()}}
\item \href{#method-validate_missing_}{\code{Field$validate_missing_()}}
\item \href{#method-serialize}{\code{Field$serialize()}}
\item \href{#method-deserialize}{\code{Field$deserialize()}}
\item \href{#method-bind_to_schema}{\code{Field$bind_to_schema()}}
\item \href{#method-serialize_}{\code{Field$serialize_()}}
\item \href{#method-deserialize_}{\code{Field$deserialize_()}}
\item \href{#method-context}{\code{Field$context()}}
\item \href{#method-root}{\code{Field$root()}}
\item \href{#method-clone}{\code{Field$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new Field object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Field$new(
  default = miss_ing,
  attribute = NULL,
  data_key = NULL,
  validate = NULL,
  required = FALSE,
  allow_none = NULL,
  load_only = FALSE,
  dump_only = FALSE,
  missing = miss_ing,
  error_messages = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{default}}{If set, this value will be used during serialization if
the input value is missing. If not set, the field will be excluded from
the serialized output if the input value is missing. May be a value or
a callable.}

\item{\code{attribute}}{The name of the key to get the value from when
deserializing. If \code{None}, assumes the key has the same name as the
field.}

\item{\code{data_key}}{The name of the key to get the value from when
deserializing. If \code{None}, assumes the key has the same name as the field.}

\item{\code{validate}}{Validator or collection of validators that
are called during deserialization. Validator takes a field's input
value as its only parameter and returns a boolean. If it returns \code{FALSE},
an \code{ValidationError} is raised.}

\item{\code{required}}{Raise a \code{ValidationError} if the field value
is not supplied during deserialization.}

\item{\code{allow_none}}{Set this to \code{TRUE} if \code{None} should be considered a
valid value during validation/deserialization. If \code{missing=NULL}
and \code{allow_none} is unset, will default to \code{TRUE}. Otherwise, the
default is \code{FALSE}.}

\item{\code{load_only}}{If \code{TRUE} skip this field during serialization,
otherwise its value will be present in the serialized data.}

\item{\code{dump_only}}{If \code{TRUE} skip this field during deserialization,
otherwise its value will be present in the deserialized object. In the
context of an HTTP API, this effectively marks the field as "read-only".}

\item{\code{missing}}{Default deserialization value for the field if the field
is not found in the input data. May be a value or a callable.}

\item{\code{error_messages}}{Overrides for \code{Field.default_error_messages}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{Field} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
print method for Field objects
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Field$print(x, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{self}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_value"></a>}}
\if{latex}{\out{\hypertarget{method-get_value}{}}}
\subsection{Method \code{get_value()}}{
Return the value for a given key from an object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Field$get_value(obj, attr, accessor = NULL, default = miss_ing)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{obj}}{The object to get the value from}

\item{\code{attr}}{The attribute/key in \code{obj} to get the value from.}

\item{\code{accessor}}{(callback) A callable used to retrieve the value of \code{attr}}

\item{\code{default}}{If set, this value will be used during serialization if
the input value is missing. If not set, the field will be excluded from
the serialized output if the input value is missing. May be a value or
a callable.
from the object \code{obj}. Defaults to \code{marshmallow.utils.get_value}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-validate_"></a>}}
\if{latex}{\out{\hypertarget{method-validate_}{}}}
\subsection{Method \code{validate_()}}{
Perform validation on \code{value}. Raise a \code{ValidationError}
if validation does not succeed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Field$validate_(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{a value}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-fail"></a>}}
\if{latex}{\out{\hypertarget{method-fail}{}}}
\subsection{Method \code{fail()}}{
A helper method that simply raises a
\code{ValidationError}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Field$fail(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{a key}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-validate_missing_"></a>}}
\if{latex}{\out{\hypertarget{method-validate_missing_}{}}}
\subsection{Method \code{validate_missing_()}}{
Validate missing values. Raise a \code{ValidationError}
if \code{value} should be considered missing.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Field$validate_missing_(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{a value}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-serialize"></a>}}
\if{latex}{\out{\hypertarget{method-serialize}{}}}
\subsection{Method \code{serialize()}}{
Pulls the value for the given key from the object,
applies the field's formatting and returns the result.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Field$serialize(attr, obj, accessor = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{attr}}{(character) The attribute or key to get from the object.}

\item{\code{obj}}{(character) The object to pull the key from.}

\item{\code{accessor}}{(callback) Function used to pull values from \code{obj}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
raise ValidationError: In case of formatting problem
}

\subsection{Returns}{
xxxx
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-deserialize"></a>}}
\if{latex}{\out{\hypertarget{method-deserialize}{}}}
\subsection{Method \code{deserialize()}}{
Deserialize \code{value}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Field$deserialize(value, attr = NULL, data = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{The value to be deserialized.}

\item{\code{attr}}{(character) The attribute/key in \code{data} to be deserialized.}

\item{\code{data}}{(list) The raw input data passed to the \code{Schema.load}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
raise ValidationError: If an invalid value is passed or if a
required value is missing.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-bind_to_schema"></a>}}
\if{latex}{\out{\hypertarget{method-bind_to_schema}{}}}
\subsection{Method \code{bind_to_schema()}}{
Update field with values from its parent schema.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Field$bind_to_schema(field_name, schema)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{field_name}}{(character) Field name set in schema.}

\item{\code{schema}}{Parent schema.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-serialize_"></a>}}
\if{latex}{\out{\hypertarget{method-serialize_}{}}}
\subsection{Method \code{serialize_()}}{
Serializes \code{value} to a basic Python datatype. Noop by
default. Concrete :class:\code{Field} classes should implement this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Field$serialize_(value, attr = NULL, obj = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{The value to be deserialized.}

\item{\code{attr}}{(character) The attribute/key in \code{data} to be deserialized.}

\item{\code{obj}}{(character) The object to pull the key from.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
raise ValidationError: In case of formatting or validation
failure.
}

\subsection{Returns}{
The serialized value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-deserialize_"></a>}}
\if{latex}{\out{\hypertarget{method-deserialize_}{}}}
\subsection{Method \code{deserialize_()}}{
Deserialize value. Concrete :class:\code{Field} classes should implement this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Field$deserialize_(value, attr, data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{The value to be deserialized.}

\item{\code{attr}}{(character) The attribute/key in \code{data} to be deserialized.}

\item{\code{data}}{(list) The raw input data passed to the \code{Schema.load}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
raise ValidationError: In case of formatting or validation failure.
}

\subsection{Returns}{
The deserialized value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-context"></a>}}
\if{latex}{\out{\hypertarget{method-context}{}}}
\subsection{Method \code{context()}}{
The context dictionary for the parent \code{Schema}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Field$context()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-root"></a>}}
\if{latex}{\out{\hypertarget{method-root}{}}}
\subsection{Method \code{root()}}{
Reference to the \code{Schema} that this field belongs
to even if it is buried in a \code{List}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Field$root()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{None} for unbound fields
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Field$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
