% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Field.R
\docType{data}
\name{Field}
\alias{Field}
\title{Field}
\arguments{
\item{default}{If set, this value will be used during serialization if
the input value is missing. If not set, the field will be excluded from
the serialized output if the input value is missing. May be a value or
a callable.}

\item{attribute}{The name of the key to get the value from when
deserializing. If \code{None}, assumes the key has the same name as the
field.}

\item{data_key}{The name of the key to get the value from when
deserializing. If \code{None}, assumes the key has the same name as the field.}

\item{validate}{Validator or collection of validators that
are called during deserialization. Validator takes a field's input
value as its only parameter and returns a boolean. If it returns \code{FALSE},
an :exc:\code{ValidationError} is raised.}

\item{required}{Raise a :exc:\code{ValidationError} if the field value
is not supplied during deserialization.}

\item{allow_none}{Set this to \code{TRUE} if \code{None} should be considered a
valid value during validation/deserialization. If \code{missing=NULL}
and \code{allow_none} is unset, will default to \code{TRUE}. Otherwise, the
default is \code{FALSE}.}

\item{load_only}{If \code{TRUE} skip this field during serialization,
otherwise its value will be present in the serialized data.}

\item{dump_only}{If \code{TRUE} skip this field during deserialization,
otherwise its value will be present in the deserialized object. In the
context of an HTTP API, this effectively marks the field as "read-only".}

\item{missing}{Default deserialization value for the field if the field
is not found in the input data. May be a value or a callable.}

\item{error_messages}{Overrides for \code{Field.default_error_messages}.}

\item{metadata}{Extra arguments to be stored as metadata.}
}
\description{
Basic field from which other fields should extend. It applies no
formatting by default, and should only be used in cases where
data does not need to be formatted before being serialized or deserialized.
On error, the name of the field will be returned.
}
\details{
\strong{Methods}
\describe{
\item{\code{serialize(x, ...)}}{
Pulls the value for the given key from the object, applies the
field's formatting and returns the result.
:param str attr: The attribute or key to get from the object.
:param str obj: The object to pull the key from.
:param callable accessor: Function used to pull values from \code{obj}.
:param dict kwargs': Field-specific keyword arguments.
:raise ValidationError: In case of formatting problem
}
\item{\code{deserialize(x, ...)}}{
Deserialize \code{value}.
:param value: The value to be deserialized.
:param str attr: The attribute/key in \code{data} to be deserialized.
:param dict data: The raw input data passed to the \code{Schema.load}.
:param dict kwargs': Field-specific keyword arguments.
:raise ValidationError: If an invalid value is passed or if a required value
is missing.
}
\item{\code{serialize_(x, ...)}}{
Serializes \code{value} to a basic Python datatype. Noop by default.
Concrete :class:\code{Field} classes should implement this method.
:param value: The value to be serialized.
:param str attr: The attribute or key on the object to be serialized.
:param object obj: The object the value was pulled from.
:param dict kwargs': Field-specific keyword arguments.
:raise ValidationError: In case of formatting or validation failure.
:return: The serialized value
}
\item{\code{deserialize_(x, ...)}}{
Deserialize value. Concrete :class:\code{Field} classes should implement this method.
:param value: The value to be deserialized.
:param str attr: The attribute/key in \code{data} to be deserialized.
:param dict data: The raw input data passed to the \code{Schema.load}.
:param dict kwargs': Field-specific keyword arguments.
:raise ValidationError: In case of formatting or validation failure.
:return: The deserialized value.
.. versionchanged:: 3.0.0
Add \code{**kwargs} parameters
.. versionchanged:: 2.0.0
Added \code{attr} and \code{data} parameters.
}
\item{\code{get_value(x, ...)}}{
Return the value for a given key from an object.
:param object obj: The object to get the value from
:param str attr: The attribute/key in \code{obj} to get the value from.
:param callable accessor: A callable used to retrieve the value of \code{attr} from
the object \code{obj}. Defaults to \code{marshmallow.utils.get_value}.
}
\item{\code{validate_(x, ...)}}{
Perform validation on \code{value}. Raise a :exc:\code{ValidationError} if validation
does not succeed.
}
\item{\code{validate_missing_(x, ...)}}{
Validate missing values. Raise a :exc:\code{ValidationError} if
\code{value} should be considered missing.
}
\item{\code{fail(x, ...)}}{
A helper method that simply raises a \code{ValidationError}.
}
}
}
\examples{
x <- puft_fields$field()
x
x$error_messages

z <- puft_fields$character()
z
z$error_messages
z$serialize(attr = "foo", obj = list(foo = "bar"))
z$deserialize("foo")
z$deserialize(puft_fields$missing())
}
\keyword{datasets}
